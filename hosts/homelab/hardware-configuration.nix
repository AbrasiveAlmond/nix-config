# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "ehci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/5b7c218d-ddea-42f3-890f-73b1762029c3";
      fsType = "ext4";

      options = [ 
        "noatime" # Disable file access times to save huge disk write cycles.
        "nodiratime" # Same as above for directories.
      ]; 
    };

  fileSystems."/srv/immich" =
    { device = "/dev/disk/by-uuid/e9b66eaa-9727-49fc-bbac-ce43688e4560";
      fsType = "btrfs";

      options = [ 
        # https://smarttech101.com/relatime-atime-noatime-strictatime-lazytime
        # https://wiki.debian.org/SSDOptimization
        # Disabling atime or enabling "lazytime" helps by:
        # saving writes, increasing performance, and extending disk life.

        # "lazytime" # Access times are stored in memory and updated less frequently, but still enabled.
        "noatime" # Disable file access times to save huge disk write cycles.
        "nodiratime" # Same as above for directories.
        # "discard" # enables fstrim sort of? services.fstrim does the same. Is enabled through nixos hardware 
        # "nofail" # Prevent system from failing if this drive doesn't mount
      ]; 
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/592606da-3d3c-451c-8d21-7f9a7183c2ab"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
